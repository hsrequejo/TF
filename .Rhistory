library(multinet)
library(igraph)
library(plyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(kableExtra)
library(akima)
library(plot3D)
#-------------------
#Funcoes auxiliares---------------------------------------------------------------------------------------------
source("Aux_functions.R", encoding="utf-8")
#-------------------------------------------------------------------
# Client
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# informa o R que o diretório de trabalho é o do documento atual
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("Network_Inputs/bat-plant_nodes.csv", header=T, as.is=T)
links = read.csv("Network_Inputs/bat_plant_links.csv", header=T, as.is=T)
# nodes = read.csv("ant-plant_nodes.csv", header=T, as.is=T)
# links = read.csv("ant-plant_links.csv", header=T, as.is=T)
# Pra ser usado no corpo do texto do documento R Markdown
net_name = "Morcegos-plantas"
#string com o referencia no arquivo .bib, e.g. "Mello2019". Usada para fazer a citação no R Markdown
bib_ref = "Mello2019"
file_to_save = "bats.RData"
nodes = nodes[order(nodes$name),] #ordena os nos. Importante para referenciar os nos corretamente
# Converte nodes e links em objeto multinet para an?lise e Igraph para visualizacao usando uma funcao auxilar
net_multinet = Convert_to_Multinet(nodes, links)
#salva um dataframe com as propriedades da rede
propriedades_rede = Net_prop(net_multinet)
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("Network_Inputs/bat-plant_nodes.csv", header=T, as.is=T)
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("Network_Inputs\bat-plant_nodes.csv", header=T, as.is=T)
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("/Network_Inputs/bat-plant_nodes.csv", header=T, as.is=T)
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("./Network_Inputs/bat-plant_nodes.csv", header=T, as.is=T)
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("./Network_Inputs/bat-plant_nodes.csv", header=T, as.is=T)
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("Network_Inputs/bat-plant_nodes.csv", header=T, as.is=T)
links = read.csv("Network_Inputs/bat-plant_links.csv", header=T, as.is=T)
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("bat-plant_nodes.csv", header=T, as.is=T)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# informa o R que o diretório de trabalho é o do documento atual
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("bat-plant_nodes.csv", header=T, as.is=T)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# informa o R que o diretório de trabalho é o do documento atual
library(multinet)
library(igraph)
library(plyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(kableExtra)
library(akima)
library(plot3D)
#-------------------
#Funcoes auxiliares---------------------------------------------------------------------------------------------
source("Aux_functions.R", encoding="utf-8")
#-------------------------------------------------------------------
# Client
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))#
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("Network_Input/bat-plant_nodes.csv", header=T, as.is=T)
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("bat-plant_nodes.csv", header=T, as.is=T)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# informa o R que o diretório de trabalho é o do documento atual
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("bat-plant_nodes.csv", header=T, as.is=T)
#comentar/descomentar (ctrl+shift+c) para escolher qual rede usar como entrada
nodes = read.csv("./Network_Inputs/bat-plant_nodes.csv", header=T, as.is=T)
source('C:/Users/Henrique/Desktop/Relatorio_Mes7_RMarkdown/G_analysis.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Henrique/Desktop/Relatorio_Mes7_RMarkdown/G_analysis.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Henrique/Desktop/Relatorio_Mes7_RMarkdown/G_analysis.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Henrique/Desktop/Relatorio_Mes7_RMarkdown/Aux_functions.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Henrique/Desktop/Relatorio_Mes7_RMarkdown/G_analysis.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Henrique/Desktop/Relatorio_Mes7_RMarkdown/G_analysis.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Henrique/Desktop/Relatorio_Mes7_RMarkdown/G_analysis.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Henrique/Desktop/Relatorio_Mes7_RMarkdown/G_analysis.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/Henrique/Desktop/Relatorio_Mes7_RMarkdown/Check_Install_Packages.R', encoding = 'UTF-8', echo=TRUE)
install.packages("multinet_3.3.1.tar.gz", repos=NULL, type="source")
if (!require(multinet)) install.packages('multinet')
library(multinet)
remove.packages("multinet")
install.packages("multinet_3.3.1.tar.gz", repos=NULL, type="source")
library(multinet)
if (!require(multinet)) install.packages('multinet')
library(multinet)
install.packages('multinet')
install.packages("multinet")
install.packages("multinet")
install.packages("multinet")
source('C:/_Projetos/TF/W_Gamma_na_Pratica/W_Gamma_Visualization.R', encoding = 'UTF-8', echo=TRUE)
source('C:/_Projetos/TF/W_Gamma_na_Pratica/W_Gamma_Visualization.R', encoding = 'UTF-8', echo=TRUE)
###############################################################
# Junta as imagens de um diretorio em um mosaico              #
#                                                             #
# Henrique S Requejo 10/11/2020                               #
###############################################################
library("stringr")
library("multipanelfigure")
library(png)
library(fs)
path <- "./To_Mosaico"
list_jpg <- dir_ls(path, glob = "*.jpg")
jpg_names = str_sub(list_jpg, 40)
jpg_names = str_sub(jpg_names, 1, -5)
jpg_names
# width = 50 x columns  height = 50 x rows
# O numero de colunas e linhas deve estar de acordo com as figuras do diretorio To_Mosaico
figure1 <- multi_panel_figure(width = 400, height = 500, columns = 4, rows = 5)
for (i in 1:length(list_jpg)) {
figure1 <- fill_panel(figure1, list_jpg[i], label = "", label_just = "left", scaling = "fit")
}
figure1 %>% save_multi_panel_figure(filename = "Mosaico.png")
pwd
###############################################################
# Junta as imagens de um diretorio em um mosaico              #
#                                                             #
# Henrique S Requejo 10/11/2020                               #
###############################################################
library("stringr")
library("multipanelfigure")
library(png)
library(fs)
path <- "./To_Mosaico"
list_jpg <- dir_ls(path, glob = "*.jpg")
jpg_names = str_sub(list_jpg, 40)
jpg_names = str_sub(jpg_names, 1, -5)
jpg_names
# width = 50 x columns  height = 50 x rows
# O numero de colunas e linhas deve estar de acordo com as figuras do diretorio To_Mosaico
figure1 <- multi_panel_figure(width = 400, height = 500, columns = 4, rows = 5)
for (i in 1:length(list_jpg)) {
figure1 <- fill_panel(figure1, list_jpg[i], label = "", label_just = "left", scaling = "fit")
}
figure1 %>% save_multi_panel_figure(filename = "Mosaico.png")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.pos = 'H', fig.align="center")
library(multinet)
library(igraph)
library(plyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(kableExtra)
library(akima)
library(plot3D)
source("Aux_functions.R", encoding="utf-8") # importante a opção UTF-8 devido ao acentos nos plots
load("./RDatas/bats.RData")
net_multinet = Convert_to_Multinet(nodes, links)
lnum = num_layers_ml(net_multinet) #numero de camadas da rede
# serve para juntar toas as camadas em uma string soh. Bom para usar como texto
lnames = layers_ml(net_multinet)
lnames2 = ""
for (i in 1:lnum) {
if (i==1) {
lnames2 = paste(lnames[i])
}
else if (i==lnum) {
lnames2 = paste(lnames2, " e ", lnames[i])
}
else{
lnames2 = paste(lnames2, ", ", lnames[i])
}
}
nnum = num_actors_ml(net_multinet, layers = character(0))
cnum = num_edges_ml(net_multinet)
#Monta a coluna de valores e nome da propriedade para montar o df propriedades_da_rede
numbers = c(lnum, lnames2, nnum, cnum)
labels = c("Número de Camadas", "Tipo de conexões", "Número de nós", "Número de conexões")
#Monta a tabela de prorpiedades da rede
propriedades_rede = data.frame(labels, numbers)
names(propriedades_rede) = c("Propriedade", "Valor")
kable(propriedades_rede, "latex", booktabs = T, caption = paste("\\label{tab:1}Propriedades da rede ", net_name)) %>% kable_styling(latex_options = c("striped", "hold_position"))
#calcula um layout (igraph) e plota o grafo usando a funcao aux CustomPlot----
Custom_plot2D(links, nodes, layout, vertex_label_cex = NULL, vertex_size = 3) # TODO: melhorar o custom plot depois
numbers = c(iterations, partitions_of_omega)
labels = c("Iterações", "Partições de omega")
propriedades_rede = data.frame(labels, numbers)
names(propriedades_rede) = c("Parâmetro", "Valor")
kable(propriedades_rede, "latex", booktabs = T, caption = "\\label{tab:2}Parâmetros de execucao") %>% kable_styling(latex_options = c("striped", "hold_position"))
G_norm_dristrib_plot(G_norm_mean_ordered)
#seleciona quatro noh e guarda suas curvas de decaimento G em relacao a w e gamma usando funcao auxiliar
selection = Select_Example_Nodes(G_norm_mean_ordered)
plots_2D = list() #armazena os plots 2D que serao plotados
for (i in 1:length(selection)) {
#plota a familia de curvas G para cada gamma de um no escolhido----
chosen_node = names(selection[i])
plots_2D[[i]] = G_curves_for_different_gammas(seq_Gnorm_gamma_mean, chosen_node, vec_W, gammas)
}
for (i in 1:length(selection)) {
print(plots_2D[[i]])
}
for (i in 1:length(selection)) {
chosen_node = names(selection[i])
Plot_G_gamma_omega_suf_3D(seq_Gnorm_gamma_mean, chosen_node, vec_W, gammas)
}
for (i in 1:length(selection)) {
chosen_node = names(selection[i])
Plot_G_gamma_omega_heat_3D(seq_Gnorm_gamma_mean, chosen_node, vec_W, gammas)
}
G_threshold = 1.35
size1 = 3 #tamanho dos nos abixo do G_threshold
size2 = 3*size1 #tamanho dos valores acima de G_threshold
if (lnum < 4) {
asp = 0.6
}else{
asp = 1
}
Custom_plot2D_destaque_palette(G_norm_mean, links, nodes, layout, size1, size2)
selected_nodes = sort(G_norm_mean[which(G_norm_mean > G_threshold)], decreasing = TRUE)
selected_nodes_df = data.frame(names(selected_nodes), format(round(selected_nodes, 3), nsmall = 3))
names(selected_nodes_df) = c("Espécie", "$G_{norm}$")
rownames(selected_nodes_df) = NULL
kable(selected_nodes_df, "latex", booktabs = T, caption = paste("\\label{tab:3}Espécies com valores de $G_{norm}$ maiores que", G_threshold), escape = FALSE) %>% kable_styling(latex_options = c("striped", "hold_position"))
load("./RDatas/ants.RData")
net_multinet = Convert_to_Multinet(nodes, links)
lnum = num_layers_ml(net_multinet) #numero de camadas da rede
# serve para juntar toas as camadas em uma string soh. Bom para usar como texto
lnames = layers_ml(net_multinet)
lnames2 = ""
for (i in 1:lnum) {
if (i==1) {
lnames2 = paste(lnames[i])
}
else if (i==lnum) {
lnames2 = paste(lnames2, " e ", lnames[i])
}
else{
lnames2 = paste(lnames2, ", ", lnames[i])
}
}
nnum = num_actors_ml(net_multinet, layers = character(0))
cnum = num_edges_ml(net_multinet)
#Monta a coluna de valores e nome da propriedade para montar o df propriedades_da_rede
numbers = c(lnum, lnames2, nnum, cnum)
labels = c("Número de Camadas", "Tipo de conexões", "Número de nós", "Número de conexões")
#Monta a tabela de prorpiedades da rede
propriedades_rede = data.frame(labels, numbers)
names(propriedades_rede) = c("Propriedade", "Valor")
kable(propriedades_rede, "latex", booktabs = T, caption = paste("\\label{tab:1a}Propriedades da rede ", net_name)) %>% kable_styling(latex_options = c("striped", "hold_position"))
#calcula um layout (igraph) e plota o grafo usando a funcao aux CustomPlot----
Custom_plot2D(links, nodes, layout, vertex_label_cex = NULL, vertex_size = 3) # TODO: melhorar o custom plot depois
numbers = c(iterations, partitions_of_omega)
labels = c("Iterações", "Partições de omega")
propriedades_rede = data.frame(labels, numbers)
names(propriedades_rede) = c("Parâmetro", "Valor")
kable(propriedades_rede, "latex", booktabs = T, caption = "\\label{tab:2a}Parâmetros de execucao") %>% kable_styling(latex_options = c("striped", "hold_position"))
G_norm_dristrib_plot(G_norm_mean_ordered)
#seleciona quatro noh e guarda suas curvas de decaimento G em relacao a w e gamma usando funcao auxiliar
selection = Select_Example_Nodes(G_norm_mean_ordered)
plots_2D = list() #armazena os plots 2D que serao plotados
for (i in 1:length(selection)) {
#plota a familia de curvas G para cada gamma de um no escolhido----
chosen_node = names(selection[i])
plots_2D[[i]] = G_curves_for_different_gammas(seq_Gnorm_gamma_mean, chosen_node, vec_W, gammas)
}
for (i in 1:length(selection)) {
print(plots_2D[[i]])
}
for (i in 1:length(selection)) {
chosen_node = names(selection[i])
Plot_G_gamma_omega_suf_3D(seq_Gnorm_gamma_mean, chosen_node, vec_W, gammas)
}
for (i in 1:length(selection)) {
chosen_node = names(selection[i])
Plot_G_gamma_omega_heat_3D(seq_Gnorm_gamma_mean, chosen_node, vec_W, gammas)
}
G_threshold = 1.21
size1 = 3 #tamanho dos nos abixo do G_threshold
size2 = 4*size1 #tamanho dos valores acima de G_threshold
if (lnum < 4) {
asp = 0.6
}else{
asp = 1
}
Custom_plot2D_destaque_palette(G_norm_mean, links, nodes, layout, size1, size2)
selected_nodes = sort(G_norm_mean[which(G_norm_mean > G_threshold)], decreasing = TRUE)
selected_nodes_df = data.frame(names(selected_nodes), format(round(selected_nodes, 3), nsmall = 3))
names(selected_nodes_df) = c("Espécie", "$G_{norm}$")
rownames(selected_nodes_df) = NULL
kable(selected_nodes_df, "latex", booktabs = T, caption = paste("\\label{tab:3a}Espécies com valores de $G_{norm}$ maiores que", G_threshold), escape = FALSE) %>% kable_styling(latex_options = c("striped", "hold_position"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.pos = 'H', fig.align="center")
library(multinet)
library(igraph)
library(plyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(kableExtra)
library(akima)
library(plot3D)
source("Aux_functions.R", encoding="utf-8") # importante a opção UTF-8 devido ao acentos nos plots
load("./RDatas/bats.RData")
net_multinet = Convert_to_Multinet(nodes, links)
lnum = num_layers_ml(net_multinet) #numero de camadas da rede
# serve para juntar toas as camadas em uma string soh. Bom para usar como texto
lnames = layers_ml(net_multinet)
lnames2 = ""
for (i in 1:lnum) {
if (i==1) {
lnames2 = paste(lnames[i])
}
else if (i==lnum) {
lnames2 = paste(lnames2, " e ", lnames[i])
}
else{
lnames2 = paste(lnames2, ", ", lnames[i])
}
}
nnum = num_actors_ml(net_multinet, layers = character(0))
cnum = num_edges_ml(net_multinet)
#Monta a coluna de valores e nome da propriedade para montar o df propriedades_da_rede
numbers = c(lnum, lnames2, nnum, cnum)
labels = c("Número de Camadas", "Tipo de conexões", "Número de nós", "Número de conexões")
#Monta a tabela de prorpiedades da rede
propriedades_rede = data.frame(labels, numbers)
names(propriedades_rede) = c("Propriedade", "Valor")
kable(propriedades_rede, "latex", booktabs = T, caption = paste("\\label{tab:1}Propriedades da rede ", net_name)) %>% kable_styling(latex_options = c("striped", "hold_position"))
#calcula um layout (igraph) e plota o grafo usando a funcao aux CustomPlot----
Custom_plot2D(links, nodes, layout, vertex_label_cex = NULL, vertex_size = 3) # TODO: melhorar o custom plot depois
net_multinet = Convert_to_Multinet(nodes, links)
lnum = num_layers_ml(net_multinet) #numero de camadas da rede
# serve para juntar toas as camadas em uma string soh. Bom para usar como texto
lnames = layers_ml(net_multinet)
lnames2 = ""
for (i in 1:lnum) {
if (i==1) {
lnames2 = paste(lnames[i])
}
else if (i==lnum) {
lnames2 = paste(lnames2, " e ", lnames[i])
}
else{
lnames2 = paste(lnames2, ", ", lnames[i])
}
}
nnum = num_actors_ml(net_multinet, layers = character(0))
cnum = num_edges_ml(net_multinet)
#Monta a coluna de valores e nome da propriedade para montar o df propriedades_da_rede
numbers = c(lnum, lnames2, nnum, cnum)
labels = c("Número de Camadas", "Tipo de conexões", "Número de nós", "Número de conexões")
#Monta a tabela de prorpiedades da rede
propriedades_rede = data.frame(labels, numbers)
names(propriedades_rede) = c("Propriedade", "Valor")
kable(propriedades_rede, "latex", booktabs = T, caption = paste("\\label{tab:1}Propriedades da rede ", net_name)) %>% kable_styling(latex_options = c("striped", "hold_position"))
#calcula um layout (igraph) e plota o grafo usando a funcao aux CustomPlot----
Custom_plot2D(links, nodes, layout, vertex_label_cex = NULL, vertex_size = 3) # TODO: melhorar o custom plot depois
