most_central_list[[i]] = centr_temp
}
most_central_list
#compara quantos nos encontrados no Gnorm estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_bin = rep(0, length(most_central_list))
names(similarity_bin) = c("clo", "btw", "eig", "deg", "Gnorm")
similarity_string_list = list()
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_bin[i] = similarity_bin[i] + 1
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
similarity_string_list[[i]] = list_temp
}
similarity_bin = similarity_bin/ranking_cutoff
similarity_bin
most_central_list
similarity_string_list
#Faz a lista de dissimilaridades de nos
for (i in 1:length(most_central_list)) {
for (j in 1:ranking_cutoff) {
for (k in vector) {
if (names(similarity_string_list[[i]][[k]]) != names(most_central_list[[i]][k])){
}
}
}
}
#compara a distancia entre os rankings encontrados no Gnorm com os que estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_dist = rep(0, length(most_central_list))
names(similarity_dist) = c("clo", "btw", "eig", "deg", "Gnorm")
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_dist[i] = similarity_dist[i] + (1/(1+abs(j-k)))
}
}
}
}
similarity_bin
#similarity_dist = 1-((similarity_dist + (((1-similarity_bin)*ranking_cutoff)*ranking_cutoff))/(ranking_cutoff^2))
similarity_dist = similarity_dist/ranking_cutoff
similarity_dist
most_central_list
similarity_string_list
length(similarity_string_list[[1]])
disimilarity_string_list = list()
for (i in 1:length(most_central_list)) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:length(similarity_string_list[[i]])) {
if (names(similarity_string_list[[i]][[k]]) != names(most_central_list[[i]][j])){
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
disimilarity_string_list[[i]] = list_temp
}
disimilarity_string_list
similarity_string_list
most_central_list
#Faz a lista de dissimilaridades de nos
disimilarity_string_list = list()
for (i in 1:length(most_central_list)) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:length(similarity_string_list[[i]])) {
if (names(similarity_string_list[[i]][[k]][1]) != names(most_central_list[[i]][j])){
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
disimilarity_string_list[[i]] = list_temp
}
disimilarity_string_list
names(similarity_string_list[[1]][[1]][1]
)
names(similarity_string_list[[1]][[1]][1])
names(similarity_string_list[[1]][[1]])
#Faz a lista de dissimilaridades de nos
disimilarity_string_list = list()
for (i in 1:length(most_central_list)) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:length(similarity_string_list[[i]])) {
if (similarity_string_list[[i]][[k]] != names(most_central_list[[i]][j])){
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
disimilarity_string_list[[i]] = list_temp
}
disimilarity_string_list
# Compara os nos mais centrais da rede monocamada com os noh obtidos traves de Gnorm
load("bats_allCentr.RData")
clo
btw
eig = eig_formated
eig
deg = deg_formated
deg
Gnorm
# 1=clo  2=btw   3=eig   4=deg   5=Gnorm
centr_list = list(clo, btw, eig, deg, Gnorm)
#separa os nohs mais centrais
most_central_list = list()
ranking_cutoff = 10
for (i in 1:length(centr_list)) {
centr_temp = centr_list[[i]]
centr_temp = sort(centr_temp, decreasing = TRUE)
centr_temp = centr_temp[1:ranking_cutoff]
most_central_list[[i]] = centr_temp
}
most_central_list
#compara quantos nos encontrados no Gnorm estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_bin = rep(0, length(most_central_list))
names(similarity_bin) = c("clo", "btw", "eig", "deg", "Gnorm")
similarity_string_list = list()
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_bin[i] = similarity_bin[i] + 1
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
similarity_string_list[[i]] = list_temp
}
similarity_bin = similarity_bin/ranking_cutoff
similarity_bin
most_central_list
similarity_string_list
#compara a distancia entre os rankings encontrados no Gnorm com os que estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_dist = rep(0, length(most_central_list))
names(similarity_dist) = c("clo", "btw", "eig", "deg", "Gnorm")
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_dist[i] = similarity_dist[i] + (1/(1+abs(j-k)))
}
}
}
}
similarity_bin
#similarity_dist = 1-((similarity_dist + (((1-similarity_bin)*ranking_cutoff)*ranking_cutoff))/(ranking_cutoff^2))
similarity_dist = similarity_dist/ranking_cutoff
similarity_dist
most_central_list
# Compara os nos mais centrais da rede monocamada com os noh obtidos traves de Gnorm
load("bats_allCentr.RData")
clo
btw
eig = eig_formated
eig
deg = deg_formated
deg
Gnorm
# 1=clo  2=btw   3=eig   4=deg   5=Gnorm
centr_list = list(clo, btw, eig, deg, Gnorm)
#separa os nohs mais centrais
most_central_list = list()
ranking_cutoff = 10
for (i in 1:length(centr_list)) {
centr_temp = centr_list[[i]]
centr_temp = sort(centr_temp, decreasing = TRUE)
centr_temp = centr_temp[1:ranking_cutoff]
most_central_list[[i]] = centr_temp
}
most_central_list
#compara quantos nos encontrados no Gnorm estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_bin = rep(0, length(most_central_list))
names(similarity_bin) = c("clo", "btw", "eig", "deg", "Gnorm")
similarity_string_list = list()
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_bin[i] = similarity_bin[i] + 1
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
similarity_string_list[[i]] = list_temp
}
similarity_bin = similarity_bin/ranking_cutoff
similarity_bin
most_central_list
similarity_string_list
#compara a distancia entre os rankings encontrados no Gnorm com os que estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_dist = rep(0, length(most_central_list))
names(similarity_dist) = c("clo", "btw", "eig", "deg", "Gnorm")
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_dist[i] = similarity_dist[i] + (1/(1+abs(j-k)))
}
}
}
}
similarity_bin
#similarity_dist = 1-((similarity_dist + (((1-similarity_bin)*ranking_cutoff)*ranking_cutoff))/(ranking_cutoff^2))
similarity_dist = similarity_dist/ranking_cutoff
similarity_dist
most_central_list
# Rascunho: Agrega uma rede multicamada e analisa a centralidade monocamada da rede agregada
#install.packages("CINNA")
library(multinet)
library(igraph)
library(dplyr)
library(CINNA)
#Funcoes auxiliares---------------------------------------------------------------------------------------------
source("Aux_functions.R", encoding="utf-8")
#-------------------------------------------------------------------
# informa o R que o diretório de trabalho é o do documento atual
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
nodes = read.csv("./Network_Inputs/bat-plant_nodes.csv", header=T, as.is=T)
links = read.csv("./Network_Inputs/bat-plant_links.csv", header=T, as.is=T)
#ordena os nos. Importante para referenciar os nos corretamente
nodes = nodes[order(nodes$name),]
# Converte nodes e links em objeto multinet para an?lise e Igraph para visualizacao usando uma funcao auxilar
net_multinet = Convert_to_Multinet(nodes, links)
#salva um dataframe com as propriedades da rede
propriedades_rede = Net_prop(net_multinet)
#calcula um layout (igraph) e plota o grafo usando a funcao aux CustomPlot----
links_no_dupl = links[-which(duplicated(links[,c("from", "to")])==T),] # retira os duplicados para nao influenciar no layout
net_layout = graph_from_data_frame(d = links_no_dupl, vertices = nodes, directed = F) #usado somente para calcular o layout
layout = layout_nicely(net_layout) # igraph
# Agrega a rede multicamada em uma rede monocamada com e sem conexoes duplicadas
net_mono_nodup = graph_from_data_frame(d = links_no_dupl, vertices = nodes, directed = F)
net_mono = graph_from_data_frame(d = links, vertices = nodes, directed = F)
plot(net_mono)
#TODO:Analisar a centralidade da rede agregada
clo = closeness(net_mono, normalized = FALSE)
btw = betweenness(net_mono, directed = FALSE, normalized = TRUE)
eig = eigen_centrality(net_mono)
eig_formated = eig$vector
deg = centr_degree(net_mono)
deg_formated = deg$res
names(deg_formated) = names(clo)
#part = part_coeff(net_mono)
# Faz a leitura do .Rdata que contém o G_norm dos nohs do script G_Analysis
load("./RDatas/bats.RData")
Gnorm = G_norm_mean
clo
btw
eig_formated
deg_formated
Gnorm
save(clo, btw, eig_formated, deg_formated, Gnorm, file = "bats_allCentr.RData")
# Compara os nos mais centrais da rede monocamada com os noh obtidos traves de Gnorm
load("bats_allCentr.RData")
clo
btw
eig = eig_formated
eig
deg = deg_formated
deg
Gnorm
# 1=clo  2=btw   3=eig   4=deg   5=Gnorm
centr_list = list(clo, btw, eig, deg, Gnorm)
#separa os nohs mais centrais
most_central_list = list()
ranking_cutoff = 10
for (i in 1:length(centr_list)) {
centr_temp = centr_list[[i]]
centr_temp = sort(centr_temp, decreasing = TRUE)
centr_temp = centr_temp[1:ranking_cutoff]
most_central_list[[i]] = centr_temp
}
most_central_list
#compara quantos nos encontrados no Gnorm estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_bin = rep(0, length(most_central_list))
names(similarity_bin) = c("clo", "btw", "eig", "deg", "Gnorm")
similarity_string_list = list()
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_bin[i] = similarity_bin[i] + 1
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
similarity_string_list[[i]] = list_temp
}
similarity_bin = similarity_bin/ranking_cutoff
similarity_bin
most_central_list
similarity_string_list
#compara a distancia entre os rankings encontrados no Gnorm com os que estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_dist = rep(0, length(most_central_list))
names(similarity_dist) = c("clo", "btw", "eig", "deg", "Gnorm")
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_dist[i] = similarity_dist[i] + (1/(1+abs(j-k)))
}
}
}
}
similarity_bin
#similarity_dist = 1-((similarity_dist + (((1-similarity_bin)*ranking_cutoff)*ranking_cutoff))/(ranking_cutoff^2))
similarity_dist = similarity_dist/ranking_cutoff
similarity_dist
most_central_list
# Compara os nos mais centrais da rede monocamada com os noh obtidos traves de Gnorm
load("bats_allCentr.RData")
clo
btw
eig = eig_formated
eig
deg = deg_formated
deg
Gnorm
# 1=clo  2=btw   3=eig   4=deg   5=Gnorm
centr_list = list(clo, btw, eig, deg, Gnorm)
#separa os nohs mais centrais
most_central_list = list()
ranking_cutoff = 10
for (i in 1:length(centr_list)) {
centr_temp = centr_list[[i]]
centr_temp = sort(centr_temp, decreasing = TRUE)
centr_temp = centr_temp[1:ranking_cutoff]
most_central_list[[i]] = centr_temp
}
most_central_list
#compara quantos nos encontrados no Gnorm estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_bin = rep(0, length(most_central_list))
names(similarity_bin) = c("clo", "btw", "eig", "deg", "Gnorm")
similarity_string_list = list()
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_bin[i] = similarity_bin[i] + 1
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
similarity_string_list[[i]] = list_temp
}
similarity_bin = similarity_bin/ranking_cutoff
similarity_bin
most_central_list
similarity_string_list
#compara a distancia entre os rankings encontrados no Gnorm com os que estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_dist = rep(0, length(most_central_list))
names(similarity_dist) = c("clo", "btw", "eig", "deg", "Gnorm")
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_dist[i] = similarity_dist[i] + (1/(1+abs(j-k)))
}
}
}
}
similarity_bin
#similarity_dist = 1-((similarity_dist + (((1-similarity_bin)*ranking_cutoff)*ranking_cutoff))/(ranking_cutoff^2))
similarity_dist = similarity_dist/ranking_cutoff
similarity_dist
most_central_list
# Compara os nos mais centrais da rede monocamada com os noh obtidos traves de Gnorm
load("ants_allCentr.RData")
clo
btw
eig = eig_formated
eig
deg = deg_formated
deg
Gnorm
# 1=clo  2=btw   3=eig   4=deg   5=Gnorm
centr_list = list(clo, btw, eig, deg, Gnorm)
#separa os nohs mais centrais
most_central_list = list()
ranking_cutoff = 10
for (i in 1:length(centr_list)) {
centr_temp = centr_list[[i]]
centr_temp = sort(centr_temp, decreasing = TRUE)
centr_temp = centr_temp[1:ranking_cutoff]
most_central_list[[i]] = centr_temp
}
most_central_list
#compara quantos nos encontrados no Gnorm estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_bin = rep(0, length(most_central_list))
names(similarity_bin) = c("clo", "btw", "eig", "deg", "Gnorm")
similarity_string_list = list()
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_bin[i] = similarity_bin[i] + 1
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
similarity_string_list[[i]] = list_temp
}
similarity_bin = similarity_bin/ranking_cutoff
similarity_bin
most_central_list
similarity_string_list
#compara a distancia entre os rankings encontrados no Gnorm com os que estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_dist = rep(0, length(most_central_list))
names(similarity_dist) = c("clo", "btw", "eig", "deg", "Gnorm")
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_dist[i] = similarity_dist[i] + (1/(1+abs(j-k)))
}
}
}
}
similarity_bin
#similarity_dist = 1-((similarity_dist + (((1-similarity_bin)*ranking_cutoff)*ranking_cutoff))/(ranking_cutoff^2))
similarity_dist = similarity_dist/ranking_cutoff
similarity_dist
most_central_list
# Compara os nos mais centrais da rede monocamada com os noh obtidos traves de Gnorm
load("ants_allCentr.RData")
clo
btw
eig = eig_formated
eig
deg = deg_formated
deg
Gnorm
# 1=clo  2=btw   3=eig   4=deg   5=Gnorm
centr_list = list(clo, btw, eig, deg, Gnorm)
#separa os nohs mais centrais
most_central_list = list()
ranking_cutoff = 10
for (i in 1:length(centr_list)) {
centr_temp = centr_list[[i]]
centr_temp = sort(centr_temp, decreasing = TRUE)
centr_temp = centr_temp[1:ranking_cutoff]
most_central_list[[i]] = centr_temp
}
most_central_list
#compara quantos nos encontrados no Gnorm estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_bin = rep(0, length(most_central_list))
names(similarity_bin) = c("clo", "btw", "eig", "deg", "Gnorm")
similarity_string_list = list()
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_bin[i] = similarity_bin[i] + 1
list_temp = append(list_temp, names(Gnorm_most_central[j]))
}
}
}
similarity_string_list[[i]] = list_temp
}
similarity_bin = similarity_bin/ranking_cutoff
similarity_bin
most_central_list
similarity_string_list
#compara a distancia entre os rankings encontrados no Gnorm com os que estao presentes nos outros metodos
Gnorm_most_central = most_central_list[[5]]
similarity_dist = rep(0, length(most_central_list))
names(similarity_dist) = c("clo", "btw", "eig", "deg", "Gnorm")
for (i in 1:(length(most_central_list))) {
list_temp = list()
for (j in 1:ranking_cutoff) {
for (k in 1:ranking_cutoff) {
if (names(Gnorm_most_central[j]) == names(most_central_list[[i]][k])) {
similarity_dist[i] = similarity_dist[i] + (1/(1+abs(j-k)))
}
}
}
}
similarity_bin
#similarity_dist = 1-((similarity_dist + (((1-similarity_bin)*ranking_cutoff)*ranking_cutoff))/(ranking_cutoff^2))
similarity_dist = similarity_dist/ranking_cutoff
similarity_dist
most_central_list
